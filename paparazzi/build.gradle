import org.jetbrains.kotlin.gradle.plugin.AbstractKotlinPluginKt
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'com.github.johnrengelman.shadow'

java {
  sourceCompatibility = libs.versions.javaTarget.get()
  targetCompatibility = libs.versions.javaTarget.get()
}

def artifactType = Attribute.of('artifactType', String)

configurations {
  unzip {
    attributes.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

Configuration shade = configurations.maybeCreate("compileShaded")
configurations.getByName("compileOnly").extendsFrom(shade)

dependencies {
  registerTransform(org.gradle.api.internal.artifacts.transform.UnzipTransform) {
    from.attribute(artifactType, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  // Paparazzi is a Kotlin JVM module and thus cannot depend on Android library artifacts (AARs)
  // TODO: Use Gradle transforms to extract/rename classes.jar's from AARs
  api files('libs/compose-runtime-android-1.5.0.jar')
  implementation files('libs/compose-ui-android-1.5.0.jar') // Need implementation dependency to reference AbstractComposeView for AccessibilityRenderExtension
  // Needed to get compose bounds and annotated strings for Compose support for AccessibilityRenderExtension
  compileOnly files('libs/compose-ui-geometry-android-1.5.0.jar')
  compileOnly files('libs/compose-ui-text-android-1.5.0.jar')
  compileOnly libs.androidx.lifecycleCommon
  compileOnly files('libs/lifecycle-runtime-2.6.1.jar')
  compileOnly files('libs/savedstate-1.2.1.jar')
  compileOnly files('libs/androidx-activity-1.5.0.jar')

  implementation libs.trove4j
  api libs.layoutlib.native.jdk11
  api(libs.tools.common) {
    exclude group: "com.google.guava"
  }
  api libs.tools.layoutlib
  api(libs.tools.ninepatch) {
    exclude group: "com.google.guava"
  }
  api(libs.tools.sdkCommon) {
    exclude group: "com.google.guava"
  }
  api libs.kxml2
  api libs.junit
  api libs.androidx.annotations
  api libs.kotlinx.coroutines.core
  api libs.okio
  api platform(libs.kotlin.bom)
  compileShaded(libs.guava) {
    // Misc annotations-only deps that we don't need
    exclude group: "org.checkerframework"
    exclude group: "com.google.errorprone"
    exclude group: "com.google.j2objc"
    exclude group: "com.google.code.findbugs"
  }
  implementation libs.moshi.core
  implementation libs.moshi.adapters
  implementation libs.jcodec.core
  implementation libs.jcodec.javase
  implementation projects.paparazziAgent

  ksp libs.moshi.kotlinCodegen

  def osName = System.getProperty("os.name").toLowerCase(Locale.US)
  if (osName.startsWith("mac")) {
    def osArch = System.getProperty("os.arch").toLowerCase(Locale.US)
    if (osArch.startsWith("x86")) {
      unzip libs.layoutlib.native.macOsX
    } else {
      unzip libs.layoutlib.native.macArm
    }
  } else if (osName.startsWith("windows")) {
    unzip libs.layoutlib.native.windows
  } else {
    unzip libs.layoutlib.native.linux
  }

  testImplementation libs.truth

  add(AbstractKotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, libs.compose.compiler)
}

TaskProvider<ShadowJar> shadowJar = tasks.named("shadowJar", ShadowJar) {
  archiveClassifier.set("")
  configurations = [shade]
  relocate("com.google.common", "app.cash.paparazzi.shaded.com.google.common")
  relocate("com.google.thirdparty", "app.cash.paparazzi.shaded.com.google.thirdparty")
  exclude("META-INF/maven/**")
  exclude("META-INF/proguard/**")
}

artifacts {
  runtimeOnly(shadowJar)
  archives(shadowJar)
}

tasks.named("dokkaGfm").configure {
  outputDirectory = rootProject.file("docs/1.x")

  dokkaSourceSets.named("main") {
    configureEach {
      reportUndocumented = false
      skipDeprecated = true
      jdkVersion = 8
      perPackageOption {
        prefix = "app.cash.paparazzi.internal"
        suppress = true
      }
    }
  }
}

def generateTestConfig = tasks.register("generateTestConfig") {
  def resources = "$buildDir/intermediates/paparazzi/resources.txt"
  outputs.file(resources)

  doLast {
    File configFile = new File(resources)
    configFile.withWriter('utf-8') { writer ->
      writer.writeLine("app.cash.paparazzi")
      writer.writeLine(".")
      writer.writeLine("31")
      writer.writeLine("platforms/android-31/")
      writer.writeLine(".")
      writer.writeLine("app.cash.paparazzi")
      writer.writeLine("")
      writer.writeLine("")
      writer.writeLine("")
      writer.writeLine("")
      writer.writeLine("")
    }
  }
}

tasks.withType(Test).configureEach {
  dependsOn(generateTestConfig)
  systemProperty(
    "paparazzi.test.resources",
    generateTestConfig.map { it.outputs.files.singleFile }.get().path
  )
  systemProperty(
    "paparazzi.project.dir",
    project.layout.projectDirectory.toString()
  )
  systemProperty(
    "paparazzi.build.dir",
    project.layout.buildDirectory.get().toString()
  )
  systemProperty(
    "paparazzi.report.dir",
    project.extensions.getByType(ReportingExtension).baseDirectory.dir("paparazzi").get().toString()
  )
  systemProperty(
    "paparazzi.snapshot.dir",
    project.layout.projectDirectory.dir("src/test/snapshots").toString()
  )
  systemProperty(
    "paparazzi.artifacts.cache.dir",
    project.gradle.gradleUserHomeDir.path
  )
  systemProperty(
    "paparazzi.platform.data.root",
    configurations.unzip.singleFile.absolutePath
  )
  // Uncomment to debug JNI issues in layoutlib
  // jvmArgs '-Xcheck:jni'
  testLogging {
    events 'passed', 'failed', 'skipped'
    exceptionFormat 'FULL'
    showCauses true
    showExceptions true
    showStackTraces true
  }
}
